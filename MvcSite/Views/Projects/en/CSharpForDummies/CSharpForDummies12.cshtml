@{
    ViewBag.Title = "C# For Dummies";
    Layout = "~/Views/Shared/_LayoutEN.cshtml";
}

@section ExtraHeadContent {
    <meta name="description" content="C# for Dummies are the poblems from The C# Book of The Telerik Academy, their guidelines and the solutions, which I wrote or tried to :)">
    <meta name="author" content="Ivan Popov">
    <meta name="thumbnail" content="http://localhost:49690/Resources/ivanpopov.jpg" />
    <link rel="image_src" href="http://localhost:49690/Resources/ivanpopov.jpg" />
}

<h1>C# For Dummies</h1>
<h2>Chapter 12. Exception Handling</h2>
<span class="tab"></span>1. Find out all exceptions in the <code>System.IO.IOException</code> <b>hierarchy</b>.<br /><br />
<span class="tab"></span>Guidelines: Search in MSDN. The easiest way to do this is to search in Google for <b>"IOException MSDN"</b> (without the quotes).<br /><br />
<span class="tab"></span>Solution:<br />
<span class="tab"></span><a href="https://msdn.microsoft.com/en-us/library/system.io.ioexception%28v=vs.110%29.aspx" target="_blank"><b><u>Link</u></b></a><hr>
<span class="tab"></span>2. Find out all standard exceptions that are part of the <b>hierarchy</b> holding the class  <code>System.IO.FileNotFoundException</code>.<br /><br />
<span class="tab"></span>Guidelines: Look at the instructions for the <b>previous task</b>.<br /><br />
<span class="tab"></span>Solution:<br />
<span class="tab"></span><a href="https://msdn.microsoft.com/en-us/library/system.io.filenotfoundexception%28v=vs.110%29.aspx" target="_blank"><b><u>Link</u></b></a><hr>
<span class="tab"></span>3. Find out all standard exceptions from   <code>System.ApplicationException</code> <b>hierarchy</b>.<br /><br />
<span class="tab"></span>Guidelines: Look at the instructions for the <b>previous task</b>.<br /><br />
<span class="tab"></span>Solution:<br />
<span class="tab"></span><a href="https://msdn.microsoft.com/en-us/library/system.applicationexception%28v=vs.110%29.aspx" target="_blank"><b><u>Link</u></b></a><hr>
<span class="tab"></span>4. Write a program that takes a positive integer from the console and prints the <b>square root</b> of this integer. If the input is <b>negative or invalid</b> print \"Invalid Number\" in the console. In all cases print \"Good Bye\".<br /><br />
<span class="tab"></span>Guidelines: Create a  <code>try{} - catch(){} - finally{}</code> statement.<br /><br />
<span class="tab"></span>Solution: <br />
<span class="tab"></span><a href="https://github.com/ivanpop/CS-for-Dummies/tree/master/Chapter%2012%20Solution%204" target="_blank"><b><u>Link</u></b></a><hr>
<span class="tab"></span>5. Write a method <code>ReadNumber(int start, int end)</code> that reads an integer from the console in the range [start…end]. In case the input integer is not valid or it is not in the required range throw appropriate exception. Using this method, write a program that takes 10 integers <code>a1, a2, …, a10</code> such that <code>1 < a1 < … < a10 < 100</code>.<br /><br />
<span class="tab"></span>Guidelines: When invalid number is used we can throw <code>Exception</code> because there is no other exception that can better describe the problem. As an alternative we can define our own exception class called in a way that better describes the problem, e.g <code>InvalidNumberException</code>.<br /><br />
<span class="tab"></span>Solution: <br />
<span class="tab"></span><a href="https://github.com/ivanpop/CS-for-Dummies/tree/master/Chapter%2012%20Solution%205" target="_blank"><b><u>Link</u></b></a><hr>
<span class="tab"></span>6. Write a method that takes as a parameter the name of a <b>text file, reads the file and returns its content as</b> <code>string</code>. What should the method do if and <b>exception is thrown</b>?<br /><br />
<span class="tab"></span>Guidelines: Read the file line by line with <code>System.IO.StreamReader</code> class and add the rows in <code>System.Text.StringBuilder</code>. Throw all exceptions from the method without catching them. You may cheat and solve the problem in one line of code by using the static method <code>System.IO.File.ReadAllText()</code>.<br /><br />
<span class="tab"></span>Solution: <br />
<span class="tab"></span><a href="https://github.com/ivanpop/CS-for-Dummies/tree/master/Chapter%2012%20Solution%206" target="_blank"><b><u>Link</u></b></a><hr>
<span class="tab"></span>7. Write a program that gets from the user the full path to a file (for example C:\\Windows\\win.ini), reads the content of the file and prints it to the console. Find in MSDN how to us the <code>System.IO.File.ReadAllText(…)</code> method. Make sure all possible exceptions will be caught and a user-friendly message will be printed on the console.<br /><br />
<span class="tab"></span>Guidelines: Search for all possible exceptions that the method could throw and for all of them define a <code>catch</code> block and print user-friendly message.<br /><br />
<span class="tab"></span>Solution:<br />
<span class="tab"></span><a href="https://github.com/ivanpop/CS-for-Dummies/tree/master/Chapter%2012%20Solution%207" target="_blank"><b><u>Link</u></b></a><hr>
<span class="tab"></span>8. Write a program that <b>downloads a file from Internet</b> by given URL, e.g.  (http://www.devbg.org/img/Logo-BASD.jpg).<br /><br />
<span class="tab"></span>Guidelines: Search for articles in Internet for "<b>downloading a file with C#</b>" or search for information and examples about using the WebClient class. Make sure you catch and process all <b>exceptions</b> that can be thrown.<br /><br />
<span class="tab"></span>Solution: <br />
<span class="tab"></span><a href="https://github.com/ivanpop/CS-for-Dummies/tree/master/Chapter%2012%20Solution%208" target="_blank"><b><u>Link</u></b></a><br /><hr>
<span class="tab"></span><a href="javascript:history.back()">&#8592; Back</a>