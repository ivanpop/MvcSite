@{
    ViewBag.Title = "C# For Dummies";
    Layout = "~/Views/Shared/_LayoutEN.cshtml";
}

@section ExtraHeadContent {
    <meta name="description" content="C# for Dummies are the poblems from The C# Book of The Telerik Academy, their guidelines and the solutions, which I wrote or tried to :)">
    <meta name="author" content="Ivan Popov">
    <meta name="thumbnail" content="http://localhost:49690/Resources/ivanpopov.jpg" />
    <link rel="image_src" href="http://localhost:49690/Resources/ivanpopov.jpg" />
}

<h1>C# For Dummies</h1>

<h2>Chapter 2. Primitive Types and Variables</h2>
<span class="tab"></span><b>Declare several variables</b> by selecting for each one of them the most appropriate of the types <code>sbyte</code>, <code>byte</code>, <code>short</code>, <code>ushort</code>, <code>int</code>, <code>uint</code>, <code>long</code> and <code>ulong</code> in order to assign them the following values: 52,130; -115; 4825932; 97; -10000; 20000; 224; 970,700,000; 112; -44; -1,000,000; 1990; 123456789123456789.<br /><br />
<span class="tab"></span>Guidelines: Look at the ranges of the numerical types in C#.<br /><br />
<span class="tab"></span>Solution: <br />
<div class="code">
    <span class="ReferenceType">class</span>&nbsp;Program<br />
    {<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Modifier">static</span>&nbsp;<span class="ValueType">void</span>&nbsp;Main()<br />
    &nbsp;&nbsp;&nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">ushort</span>&nbsp;number1&nbsp;=&nbsp;52130;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">sbyte</span>&nbsp;number2&nbsp;=&nbsp;-115;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">uint</span>&nbsp;number3&nbsp;=&nbsp;4825932;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">byte</span>&nbsp;number4&nbsp;=&nbsp;97;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">short</span>&nbsp;number5&nbsp;=&nbsp;-10000;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">short</span>&nbsp;number6&nbsp;=&nbsp;20000;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">byte</span>&nbsp;number7&nbsp;=&nbsp;224;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">uint</span>&nbsp;number8&nbsp;=&nbsp;970700000;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">sbyte</span>&nbsp;number9&nbsp;=&nbsp;112;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">sbyte</span>&nbsp;number10&nbsp;=&nbsp;-44;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">int</span>&nbsp;number11&nbsp;=&nbsp;-1000000;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">ushort</span>&nbsp;number12&nbsp;=&nbsp;1992;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">long</span>&nbsp;number13&nbsp;=&nbsp;123456789123456789;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;}<br />
    }
</div>
<hr>
<span class="tab"></span>2. Which of the following values can be assigned to variables of type <code>float</code>, <code>double</code> and <code>decimal</code>: 5, -5.01, 34.567839023; 12.345; 8923.1234857; 3456.091124875956542151256683467? <br /><br />
<span class="tab"></span>Guidelines: Consider the number of digits after the decimal point. Refer to the table with sizes of the types <code>float</code>, <code>double</code> and <code>decimal</code>.<br /><br />
<span class="tab"></span>Solution: <br />
<div class="code">
    <span class="ReferenceType">class</span>&nbsp;Program<br />
    {<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Modifier">static</span>&nbsp;<span class="ValueType">void</span>&nbsp;Main()<br />
    &nbsp;&nbsp;&nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">double</span>&nbsp;number1&nbsp;=&nbsp;34.567839023;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">float</span>&nbsp;number2&nbsp;=&nbsp;12.345f;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">double</span>&nbsp;number3&nbsp;=&nbsp;8923.1234857;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">decimal</span>&nbsp;number4&nbsp;=&nbsp;3456.091124875956542151256683467m;&nbsp;&nbsp;&nbsp;&nbsp;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;}<br />
    }
</div>
<hr>
<span class="tab"></span>3. Write a program, which <b>compares correctly two real numbers</b> with accuracy at least <b>0.000001</b>.<br /><br />
<span class="tab"></span>Guidelines: Two floating-point variables are considered equal if their difference is less than some predefined precision (e.g. <b>0.000001</b>).<br /><br />
<span class="tab"></span>Solution: <br />
<div class="code">
    <span class="ReferenceType">class</span>&nbsp;Program<br />
    {<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Modifier">static</span>&nbsp;<span class="ValueType">void</span>&nbsp;Main()<br />
    &nbsp;&nbsp;&nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">decimal</span>&nbsp;number1&nbsp;=&nbsp;5.25745243896m;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">decimal</span>&nbsp;number2&nbsp;=&nbsp;9.8544531763m;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;number1&nbsp;+=&nbsp;number2;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(number1.ToString(<span class="String">"#.######"</span>));<br />
    &nbsp;&nbsp;&nbsp;&nbsp;}<br />
    }
</div>
<hr>
<span class="tab"></span>4. <b>Initialize</b> a variable of type int with a value of 256 in <b>hexadecimal</b> format (256 is 100 in a numeral system with base 16).<br /><br />
<span class="tab"></span>Guidelines: Look at the section about Integer Literals. To easily convert numbers to a different numeral system use the built-in Windows calculator. For a hexadecimal representation of the literal use prefix 0x.<br /><br />
<span class="tab"></span>Solution: <br />
<div class="code">
    <span class="ReferenceType">class</span>&nbsp;Program<br />
    {<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Modifier">static</span>&nbsp;<span class="ValueType">void</span>&nbsp;Main(<span class="ReferenceType">string</span>[]&nbsp;args)<br />
    &nbsp;&nbsp;&nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">int</span>&nbsp;number&nbsp;=&nbsp;0x100;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;}<br />
    }
</div>
<hr>
<span class="tab"></span>5. Declare a variable of type <code>char</code> and assign as a value the character, which has <b>Unicode</b> code, 72 (use the Windows calculator in order to find hexadecimal representation of 72).<br /><br />
<span class="tab"></span>Guidelines: Read about character literals.<br /><br />
<span class="tab"></span>Solution: <br />
<div class="code">
    <span class="ReferenceType">class</span>&nbsp;Program<br />
    {<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Modifier">static</span>&nbsp;<span class="ValueType">void</span>&nbsp;Main(<span class="ReferenceType">string</span>[]&nbsp;args)<br />
    &nbsp;&nbsp;&nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">int</span>&nbsp;number&nbsp;=&nbsp;0x100;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;}<br />
    }
</div>
<hr>
<span class="tab"></span>6. Declare a variable <code>isMale</code> of type <code>bool</code> and assign a value to it depending on your gender.<br /><br />
<span class="tab"></span>Guidelines:  Read about Boolean literals.<br /><br /><span class="tab"></span>Solution: <br />
<div class="code">
    <span class="ReferenceType">class</span>&nbsp;Program<br />
    {<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Modifier">static</span>&nbsp;<span class="ValueType">void</span>&nbsp;Main(<span class="ReferenceType">string</span>[]&nbsp;args)<br />
    &nbsp;&nbsp;&nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">bool</span>&nbsp;isMale&nbsp;=&nbsp;<span class="Keyword">true</span>;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;}<br />
    }
</div>
<hr>
<span class="tab"></span>7. Declare two variables of type <code>string</code> with values "Hello" and "World". Declare a variable of type <code>object</code>. Assign to this variable the value obtained of concatenation of the two string variables (add space if necessary). Print the variable of type <code>object</code>.<br /><br />
<span class="tab"></span>Guidelines: Read about Strings and Object Data Type.<br /><br />
<span class="tab"></span>Solution: <br />
<div class="code">
    <span class="ReferenceType">class</span>&nbsp;Program<br />
    {<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Modifier">static</span>&nbsp;<span class="ValueType">void</span>&nbsp;Main(<span class="ReferenceType">string</span>[]&nbsp;args)<br />
    &nbsp;&nbsp;&nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ReferenceType">string</span>&nbsp;str1&nbsp;=&nbsp;<span class="String">"Hello"</span>;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ReferenceType">string</span>&nbsp;str2&nbsp;=&nbsp;<span class="String">"World"</span>;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ReferenceType">object</span>&nbsp;obj&nbsp;=&nbsp;str1&nbsp;+&nbsp;<span class="String">"&nbsp;"</span>&nbsp;+&nbsp;str2;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;}<br />
    }
</div>
<hr>
<span class="tab"></span>8. Declare two variables of type <code>string</code> and assign them values "Hello" and "World". Declare a variable of type <code>object</code> and assign to it the value obtained of concatenation of the two variables of type string (do not miss the space in the middle). Declare a third variable of type <code>string</code> and initialize it with the value of the variable of type <code>object</code> (you should use type casting).<br /><br />
<span class="tab"></span>Guidelines: Read about Strings and Object Data Type <br /><br />
<span class="tab"></span>Solution: <br />
<div class="code">
    <span class="ReferenceType">class</span>&nbsp;Program<br />
    {<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Modifier">static</span>&nbsp;<span class="ValueType">void</span>&nbsp;Main(<span class="ReferenceType">string</span>[]&nbsp;args)<br />
    &nbsp;&nbsp;&nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ReferenceType">string</span>&nbsp;str1&nbsp;=&nbsp;<span class="String">"Hello"</span>;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ReferenceType">string</span>&nbsp;str2&nbsp;=&nbsp;<span class="String">"World"</span>;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ReferenceType">object</span>&nbsp;obj&nbsp;=&nbsp;str1&nbsp;+&nbsp;<span class="String">"&nbsp;"</span>&nbsp;+&nbsp;str2;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ReferenceType">string</span>&nbsp;str3&nbsp;=&nbsp;obj.ToString();<br />
    &nbsp;&nbsp;&nbsp;&nbsp;}<br />
    }
</div>
<hr>
<span class="tab"></span>9. Declare two variables of type <code>string</code> and assign them a value “<b>The "use" of quotations causes difficulties.</b>” (without the outer quotes). In one of the variables use quoted string and in the other do not use it. <br /><br />
<span class="tab"></span>Guidelines: Read about Character Literals. It is necessary to use the <b>escaping character</b> "\" or <b>verbatim strings</b>.<br /><br />
<span class="tab"></span>Solution: <br />
<div class="code">
    <span class="ReferenceType">class</span>&nbsp;Program<br />
    {<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Modifier">static</span>&nbsp;<span class="ValueType">void</span>&nbsp;Main(<span class="ReferenceType">string</span>[]&nbsp;args)<br />
    &nbsp;&nbsp;&nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ReferenceType">string</span>&nbsp;str1&nbsp;=&nbsp;<span class="String">"The&nbsp;\"use\"&nbsp;of&nbsp;quotations&nbsp;causes&nbsp;difficulties."</span>;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ReferenceType">string</span>&nbsp;str2&nbsp;=&nbsp;<span class="String">"The&nbsp;"</span>&nbsp;+&nbsp;<span class="String">"\u0022"</span>&nbsp;+&nbsp;<span class="String">"use"</span>&nbsp;+&nbsp;<span class="String">"\u0022"</span>&nbsp;+&nbsp;<span class="String">"&nbsp;of&nbsp;quotations&nbsp;causes&nbsp;difficulties"</span>;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;}<br />
    }
</div><hr>
<span class="tab"></span>10. Write a program to print a figure in the shape of a <b>heart</b> by the sign \"o\". <br /><br />
<span class="tab"></span>Guidelines: Use Console.WriteLine(…), the character 'o' and spaces. <br /><br />
<span class="tab"></span>Solution: <br />
<div class="code">
    <span class="ReferenceType">class</span>&nbsp;Program<br />
    {<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Modifier">static</span>&nbsp;<span class="ValueType">void</span>&nbsp;Main(<span class="ReferenceType">string</span>[]&nbsp;args)<br />
    &nbsp;&nbsp;&nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class="String">"&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;"</span>);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class="String">"0&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;0"</span>);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class="String">"&nbsp;0&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;0"</span>);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class="String">"&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;00&nbsp;&nbsp;&nbsp;0"</span>);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class="String">"&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;"</span>);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class="String">"&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;"</span>);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class="String">"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;0&nbsp;&nbsp;0&nbsp;&nbsp;&nbsp;"</span>);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class="String">"&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;00&nbsp;&nbsp;&nbsp;"</span>);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;}<br />
    }
</div>
<hr>
<span class="tab"></span>11. Write a program that prints on the console isosceles triangle which sides consist of the copyright character \"©\".<br /><br />
<span class="tab"></span>Guidelines: Use Console.WriteLine(…), the character © and spaces. Use Windows Character Map in order to find the Unicode code of the sign \"©\".<br /><br />
<span class="tab"></span>Solution: <br />
<div class="code">
    <span class="ReferenceType">class</span>&nbsp;Program<br />
    {<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Modifier">static</span>&nbsp;<span class="ValueType">void</span>&nbsp;Main(<span class="ReferenceType">string</span>[]&nbsp;args)<br />
    &nbsp;&nbsp;&nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class="String">"&nbsp;&nbsp;&nbsp;&nbsp;©"</span>);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class="String">"&nbsp;&nbsp;&nbsp;©&nbsp;©"</span>);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class="String">"&nbsp;&nbsp;©&nbsp;&nbsp;&nbsp;©"</span>);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class="String">"&nbsp;©&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;©"</span>);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class="String">"©©©©©©©©"</span>);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;}<br />
    }
</div>
<hr>
<span class="tab"></span>12. A company dealing with marketing wants to keep a data record of its <b>employees</b>. Each record should have the following characteristic – first name, last name, age, gender (‘m’ or ‘f’) and unique employee number (27560000 to 27569999). <b>Declare appropriate variables</b> needed to maintain the information for an employee by using the appropriate data types and attribute names. <br /><br />
<span class="tab"></span>Guidelines: For the names use type <code>string</code>, for the gender use type <code>char</code> (only one char <code>m/f</code>), and for the unique number and age use some integer type.<br /><br />
<span class="tab"></span>Solution: <br />
<div class="code">
    <span class="ReferenceType">class</span>&nbsp;Program<br />
    {<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Modifier">static</span>&nbsp;<span class="ValueType">void</span>&nbsp;Main(<span class="ReferenceType">string</span>[]&nbsp;args)<br />
    &nbsp;&nbsp;&nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ReferenceType">string</span>&nbsp;firstName;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ReferenceType">string</span>&nbsp;lastName;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">byte</span>&nbsp;age;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">char</span>&nbsp;gender;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">int</span>&nbsp;id;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;}<br />
    }
</div>
<hr>
<span class="tab"></span>13. Declare two variables of type <code>int</code>. Assign to them values 5 and 10 respectively. <b>Exchange (swap) their values</b> and print them.<br /><br />
<span class="tab"></span>Guidelines: Use a <b>third temporary variable</b> for exchanging the variables. To swap integer variables <b>other solutions</b> exist which do not use a third variable. <br /><br />
<span class="tab"></span>Solution: <br />
<div class="code">
    <span class="ReferenceType">class</span>&nbsp;Program<br />
    {<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Modifier">static</span>&nbsp;<span class="ValueType">void</span>&nbsp;Main(<span class="ReferenceType">string</span>[]&nbsp;args)<br />
    &nbsp;&nbsp;&nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">int</span>&nbsp;a&nbsp;=&nbsp;2;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<span class="ValueType">int</span>&nbsp;b&nbsp;=&nbsp;3;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;=&nbsp;a&nbsp;+&nbsp;b;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;b&nbsp;=&nbsp;a&nbsp;-&nbsp;b;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;a&nbsp;=&nbsp;a&nbsp;-&nbsp;b;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Console.WriteLine(<span class="String">"a:{0}&nbsp;b:{1}"</span>,&nbsp;a,&nbsp;b);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;}<br />
    }
</div>
<hr>
<span class="tab"></span><a href="javascript:history.back()">&#8592; Back</a>