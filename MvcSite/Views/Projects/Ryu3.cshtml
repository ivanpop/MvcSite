@{
    Layout = "~/Views/Shared/_Layout.cshtml";
    ViewBag.Title = "Ryu: The Big Adventure!";
}

<h1>Ryu: The Big Adventure!</h1>
<h3>Създаване на противниците</h3>
<h4>Придвижване към Ryu</h4>
<p><span class="tab"></span>Противника се движи когато Ryu навлезе в обхватът му, докато самият противник е жив и докато той не се намира до Ryu. Когато тези две условия са изпълнени, противникът започва да се придвижва към shiftX и shiftY координатите със скорост delta * .1f. По време на придвижването аналогично се променя и анимацията на противника, към анимация на придвижване.</p>
<div class="code">
    <span class="Statement">if</span>&nbsp;(ryuPositionX&nbsp;&lt;&nbsp;-170&nbsp;&amp;&amp;&nbsp;thugHP&nbsp;&gt;&nbsp;0)<br />
    {<br />
    &nbsp;&nbsp;<span class="Statement">if</span>&nbsp;(thugPosY&nbsp;&lt;&nbsp;117)<br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;moveY&nbsp;+=&nbsp;delta&nbsp;*&nbsp;.1f;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;thugSprite&nbsp;=&nbsp;thugWalkAnimation;<br />
    &nbsp;&nbsp;}<br />
    &nbsp;&nbsp;<span class="Statement">if</span>&nbsp;(thugPosY&nbsp;&gt;&nbsp;120)<br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;moveY&nbsp;-=&nbsp;delta&nbsp;*&nbsp;.1f;<br />
    &nbsp;&nbsp;}<br />
    &nbsp;&nbsp;<span class="Statement">if</span>&nbsp;(thugPosX&nbsp;&gt;&nbsp;170)<br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;moveX&nbsp;-=&nbsp;delta&nbsp;*&nbsp;.1f;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;thugSprite&nbsp;=&nbsp;thugWalkAnimation;<br />
    &nbsp;&nbsp;}<br />
    }
</div>
<p><span class="tab"></span>Когато стигне до играча той спира, защото тогава едно от условията за движение не е изпълнено – това да не се намира до него.</p>
<h4>Удряне</h4>
<p>
    <span class="tab"></span>За да можем да ударим главният герой, първо трябва да сме изпълнили серия от условия. Противника трябва да се намира в непосредствена близост до Ryu, Ryu трябва да не изпълнява удари или умения и самият противник трябва да е жив.<br />
    <span class="tab"></span>Първо булевият метод thugAtRyu()следи дали противника се намира на точното място, за да изпълни удар и връща true.
</p>
<div class="code">
    <span class="Modifier">public</span>&nbsp;<span class="Type">boolean</span>&nbsp;thugAtRyu(<span class="Type">float</span>&nbsp;thugPosX,&nbsp;<span class="Type">float</span>&nbsp;thugPosY)<br />
    {<br />
    &nbsp;&nbsp;<span class="Statement">if</span>&nbsp;(thugPosX&nbsp;&lt;&nbsp;190&nbsp;&amp;&amp;&nbsp;thugPosX&nbsp;&gt;&nbsp;115&nbsp;&amp;&amp;&nbsp;<br />
    &nbsp;&nbsp;thugPosY&nbsp;&lt;&nbsp;130&nbsp;&amp;&amp;&nbsp;thugPosY&nbsp;&gt;&nbsp;70)<br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Statement">return</span>&nbsp;<span class="Keyword">true</span>;<br />
    &nbsp;&nbsp;}<br />
    &nbsp;&nbsp;<span class="Statement">else</span><br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Statement">return</span>&nbsp;<span class="Keyword">false</span>;<br />
    &nbsp;&nbsp;}<br />
    }
</div>
<p><span class="tab"></span>Със следващият булев метод, наречен ryuAttack(), ние следим дали героят не извършва някакъв удар или специално умение.</p>
<div class="code">
    <span class="Modifier">public</span>&nbsp;<span class="Type">boolean</span>&nbsp;ryuAttack()<br />
    {<br />
    &nbsp;&nbsp;<span class="Statement">if</span>&nbsp;(ryuHadouken&nbsp;||&nbsp;ryuLowKick&nbsp;||&nbsp;ryuPunch&nbsp;||&nbsp;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;ryuShoryuken&nbsp;||&nbsp;ryuShoryuken&nbsp;||&nbsp;ryuTatsaku)<br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Statement">return</span>&nbsp;<span class="Keyword">true</span>;<br />
    &nbsp;&nbsp;}<br />
    &nbsp;&nbsp;<span class="Statement">else</span><br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Statement">return</span>&nbsp;<span class="Keyword">false</span>;<br />
    &nbsp;&nbsp;}<br />
    }
</div>
<p>
    <span class="tab"></span>Както споменахме, за всяко едно действие на Ryu има съответна булева стойност. В този случай, чрез тях можем да следим действията на главният герой и да ги използваме в нашия метод.<br />
    <span class="tab"></span>Противникът трябва да удря през определено време, когато вече се намира срещу Ryu, за да се придобие реалност към действията му. За целта се използва метода enemyAttackChance().<br />
    <span class="tab"></span>enemyAttackChance() е шансът врагът да удари, когато се намира в непосредствена близост до Ryu.
</p>
<div class="code">
    <span class="Modifier">public</span>&nbsp;<span class="Type">boolean</span>&nbsp;enemyAttackChance()<br />
    {<br />
    &nbsp;&nbsp;Random&nbsp;rand&nbsp;=&nbsp;<span class="Keyword">new</span>&nbsp;Random();<br />
    <br />
    &nbsp;&nbsp;<span class="Statement">if</span>&nbsp;(rand.nextInt(1000)&nbsp;&gt;&nbsp;900)<br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Statement">return</span>&nbsp;<span class="Keyword">true</span>;<br />
    &nbsp;&nbsp;}<br />
    &nbsp;&nbsp;<span class="Statement">else</span><br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Statement">return</span>&nbsp;<span class="Keyword">false</span>;<br />
    &nbsp;&nbsp;}<br />
    }
</div>
<p><span class="tab"></span>Метода създава случайно число в интервала от 1 до 1000, с всеки един цикъл на играта. Когато числото е по-голямо от 900, метода изпраща сигнал за изпълняване на удар. Когато всички тези условия са изпълнени преминаваме към изпълнението на удара.</p>
<div class="code">
    <span class="Statement">if</span>&nbsp;(thugAtRyu(thugPosX,&nbsp;thugPosY)&nbsp;&amp;&amp;&nbsp;!ryuAttack()<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&amp;&amp;&nbsp;enemyAttackChance()&nbsp;&amp;&amp;&nbsp;showThug&nbsp;&amp;&amp;&nbsp;thugHitRyu)<br />
    {<br />
    &nbsp;&nbsp;thugSprite&nbsp;=&nbsp;thugHitAnimation;<br />
    &nbsp;&nbsp;getInitialTime&nbsp;=&nbsp;time;<br />
    <br />
    &nbsp;&nbsp;<span class="Statement">if</span>&nbsp;(!punchedSnd.playing()&nbsp;&amp;&amp;&nbsp;Menu.soundOn)<br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;punchedSnd.play(1,&nbsp;Menu.soundVolume);<br />
    &nbsp;&nbsp;}<br />
    <br />
    &nbsp;&nbsp;ryuHurt&nbsp;=&nbsp;<span class="Keyword">true</span>;<br />
    &nbsp;&nbsp;ryuHP--;<br />
    &nbsp;&nbsp;thugHitRyu&nbsp;=&nbsp;<span class="Keyword">false</span>;<br />
    }
</div>
<p>
    <span class="tab"></span>Първо, анимацията на врагът се променя към такава на удряне. След това създаваме таймер, който да връща противника към статичното си положение, след като вече е изпълнил удара. Проверяваме дали звуците са позволени в тази сесия на играта и изпълняваме звук на удряне. Също така проверяваме дали конкретният звук не се изпълнява в момента, чрез punchedSnd.playing(), който връща true когато това е вярно. Целта е да не се получава застъпване на звука, което може да доведе до какафония. Променяме анимацията на Ryu със съответната, изобразяваща състояние на болка и отнемаме от неговите жизнени точки. Накрая същият таймер връща и Ryu към статичното му положение.<br />
    <span class="tab"></span>За създаването на таймера използваме метода delay().
</p>
<div class="code">
    <span class="Modifier">public</span>&nbsp;<span class="Type">boolean</span>&nbsp;delay(<span class="Type">long</span>&nbsp;startTime,&nbsp;<span class="Type">int</span>&nbsp;number)<br />
    {<br />
    &nbsp;&nbsp;<span class="Statement">if</span>&nbsp;(startTime&nbsp;+&nbsp;number&nbsp;&lt;=&nbsp;time)<br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Statement">return</span>&nbsp;<span class="Keyword">true</span>;<br />
    &nbsp;&nbsp;}<br />
    &nbsp;&nbsp;<span class="Statement">else</span><br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Statement">return</span>&nbsp;<span class="Keyword">false</span>;<br />
    &nbsp;&nbsp;}<br />
    }
</div>
<p>
    <span class="tab"></span>Този метод използва променливата time, която представлява системното времето под формата на цифра. StartTime е времето когато е започнал таймера, а number е интервала от време до неговото приключване. Когато интервалът изтече метода връща стойност true и таймера приключва.<br />
    <span class="tab"></span>По сходен начин се изпълняват и ударите на Ryu.<br />
    <span class="tab"></span>За да нанесем удар първо проверяваме за противник в близост до Ryu и дали противника е жив. След това изсвирваме звука за удряне, по абсолютно същия начин, привключваме анимацийте на двата героя, създаваме таймер и отнемаме от жизнените точки на врага. След приключване на таймера, героите се връщат към началното си състояние и можем да започнем от начало.
</p>
<h4>Анимация за край</h4>
<p><span class="tab"></span>Анимацията за благополучен край е създадена по сходен модел с тази за начало. Тук обаче освен само нея използваме и три спрайта на Ryu, чрез които го изобразяваме в доволно състояние – състояние на успех.</p>
<div class="code">
    <span class="Modifier">public</span>&nbsp;<span class="Type">void</span>&nbsp;youWinAnimation(StateBasedGame&nbsp;sbg)<br />
    {<br />
    &nbsp;&nbsp;<span class="Statement">if</span>&nbsp;(winState)<br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;youWinScale1&nbsp;+=&nbsp;3;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;youWinScale2&nbsp;+=&nbsp;2;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;enableInput&nbsp;=&nbsp;<span class="Keyword">false</span>;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;ryuSprite&nbsp;=&nbsp;ryuReadyAnimation;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;ryuSprite.stopAt(6);<br />
    <br />
    &nbsp;&nbsp;&nbsp;&nbsp;<span class="Statement">if</span>&nbsp;(ryuSprite.isStopped())<br />
    &nbsp;&nbsp;&nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ryuSprite&nbsp;=&nbsp;ryuWin1Animation;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ryuSprite.stopAt(3);<br />
    &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;ryuSprite&nbsp;=&nbsp;ryuWin2Animation;<br />
    &nbsp;&nbsp;&nbsp;&nbsp;}<br />
    &nbsp;&nbsp;}<br />
    <br />
    &nbsp;&nbsp;<span class="Statement">if</span>&nbsp;(youWinScale1&nbsp;&gt;=&nbsp;100&nbsp;&amp;&amp;&nbsp;youWinScale1&nbsp;&lt;=&nbsp;105&nbsp;&amp;&amp;&nbsp;Menu.soundOn)<br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;youWinSnd.play(1,&nbsp;Menu.soundVolume);<br />
    &nbsp;&nbsp;}<br />
    <br />
    &nbsp;&nbsp;<span class="Statement">if</span>&nbsp;(youWinScale1&nbsp;&gt;=&nbsp;600&nbsp;&amp;&amp;&nbsp;youWinScale1&nbsp;&lt;=&nbsp;610&nbsp;<br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;youWinScale1&nbsp;-=&nbsp;3;<br />
    &nbsp;&nbsp;}<br />
    <br />
    &nbsp;&nbsp;<span class="Statement">if</span>&nbsp;(youWinScale2&nbsp;&gt;=&nbsp;1200)<br />
    &nbsp;&nbsp;{<br />
    &nbsp;&nbsp;&nbsp;&nbsp;sbg.enterState(0);<br />
    &nbsp;&nbsp;}<br />
    }
</div>
<p><span class="tab"></span>Метода се нарича youWinAnimation. Той се обхожда с всеки един цикъл на играта, но се активира, когато булевата winState върне стойност на вярно. winState връща вярна стойност, когато всички противници са убити. Проверката става като се прочетат стойностите на жизнените точки на всички противници и те са равни на 0. Самата проверка се намира в update(), следователно тя се проверява с всеки цикъл на играта.</p>
<img style="margin-left:auto;margin-right:auto;display:block;" src="/Resources/ryu12.png"><br />
<p>
    <span class="tab"></span>При вярност youWinImage изображението се изрисува на екрана, като youWinScale1 и youWinScale2 са неговите вертикални и хоризонтални размери. Тези стойности постепенно се увеличават, за да се създаде необходимата анимация. Когато стойността на youWinScale1 премине 100, се възпроизвежда и звук, за успешно завършване на играта. Когато стойността на youWinScale1 премине 600, изображението вече е в пълния си размер и скалирането приключва и малко след това играча бива прехвърлен към началното меню, чрез sbg.enterState(0);.<br />
    <span class="tab"></span>Споменахме и че Ryu също извършва анимация. Първо движението на героя се забранява с enableInput = false;. След това преминаваме към първият спрайт ryuReadyAnimation, който е изграден от 6 кадъра. Спираме анимацията на последния 6-ти кадър с ryuSprite.stopAt(6);, правим проверка дали тя е спряла с ryuSprite.isStopped() и ако това е вярно преминаваме към втория спрайт - ryuWin1Animation. Отново спираме спрайта на последният кадър, в случая кадър 3, проверяваме за спиране на анимацията и привключваме към последната анимация ryuWin2Animation.<br />
    <span class="tab"></span>Всички тези анимации и спрайтове придават усещане са успешно приключила игра.
</p>
<h2>Заключение</h2>
<p>
    <span class="tab"></span>В проекта бяха описани основните компоненти, за изграждането на нашата игра. Бяха споменати, без да бъдат детайлно изследвани – LWJGL и Slick2D библиотеките, които макар и изградени от трети страни, са необходими компоненти на средата. Разгледана беше в основи логиката на анимирането чрез спрайтове и бяха изложени някои идеи за реализация, използвани при създаването на логиката на играта Ryu: The Big Adventure.<br />
    <span class="tab"></span>Оттук нататък възможностите за развитие и подобрение на средата са много.<br />
    <span class="tab"></span>От функционална гледна точка може да бъде подобрен изкуственият интелект на опонентите. Всеки един от опонентите е създаден отделно, което означава че и характерите им могат да се направят различни. В игрите се използват различни класове герои като танк, лечител, стрелец и войн, всеки един специализиран в определени умения и с различни предимства и недостатъци.<br />
    <span class="tab"></span>Танкът e герой който има за цел да поема ударите и да предпазва останалите от щети. Той върши малко щети, но за сметка на това е много здрав и труден за убиване.<br />
    <span class="tab"></span>Лечителят използва магически сили за да лекува събратята си и да увеличава тяхната сила. Той е лесен за убиване и не извършва никакви щети и затова мястото му е в най-задните части на боя, от където използва магията си за лекуване.<br />
    <span class="tab"></span>Стрелецът и войнът са класовете които извършват най-много щети. Докато танкът задържа вниманието на враговете, лечителят поддържа всички живи, стрелецът и войнът трябва да вършат щети, които да доведат до победа за екипа.<br />
    <span class="tab"></span>Всеки един клас опонент ще изисква свой собствен изкуствен интелект, коренно различен от на останалите. Комбинацията от тези класове могат да създадат много проблеми за главният герой, принуждавайки го да използва различни стратегии за всеки един от тях.<br />
    <span class="tab"></span>Може да бъде добавена и база данни, която да съхранява резултати. Резултатите ще се бъзират на това, за колко време е преминато нивото, на каква трудност е преминато нивото, колко здраве е останало на героя в края на нивото и др.<br />
    <span class="tab"></span>Могат да се търсят други платформи за представяне, например да се създадат портове на играта за уеб браузър и за мобилни устройства, като iOS, Windows Mobile, Android и Blackberry.
</p><br />

<span class="tab"></span><b>Source: <a href="https://github.com/ivanpop/Ryu">Github</a></b>
<span class="tab"></span><b>Download: <a href="~/Resources/ryu.zip" target="_blank">Link</a></b><br /><br />
<div class="text-center">
    <div class="pages">
        <a href="Ryu?page=2">&#8656;</a>
        <a href="Ryu?page=1">1</a>
        <a href="Ryu?page=2">2</a>
        <div class="selected-page">
            <a href="#top">3</a>
        </div>
        
        <a href="Ryu?page=1">&#8658;</a>
    </div>
</div>
<br />

<span class="tab"></span><a href="javascript:history.back()">&#8592; Обратно</a>